
// This file is automatically generated. Do not edit it directly.
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { config } from '@/config/environment';

const SUPABASE_URL = config.supabase.url;
const SUPABASE_PUBLISHABLE_KEY = config.supabase.anonKey;

// Validate environment
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error("Missing Supabase environment variables");
}

// Create client with error handling
function createSupabaseClient(): SupabaseClient<Database> {
  try {
    const client = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
    
    // Validate client has required methods
    if (!client || typeof client.from !== "function" || typeof client.auth !== "object") {
      throw new Error("Invalid Supabase client - missing required methods");
    }
    
    return client;
  } catch (error) {
    console.error("[FATAL] Failed to create Supabase client:", error);
    throw new Error("Application cannot start - Supabase client creation failed");
  }
}

// Create and validate the client instance
let _supabaseClient: SupabaseClient<Database>;
try {
  _supabaseClient = createSupabaseClient();
  
  // Additional validation
  if (!_supabaseClient || typeof _supabaseClient.from !== 'function') {
    throw new Error("Client validation failed after creation");
  }
} catch (error) {
  console.error("[FATAL] Supabase client initialization failed:", error);
  throw error;
}

// Create a getter function to ensure we always return a valid client
function getSupabaseClient(): SupabaseClient<Database> {
  if (!_supabaseClient || typeof _supabaseClient.from !== 'function') {
    console.error("[FATAL] Supabase client is invalid, attempting recreation");
    _supabaseClient = createSupabaseClient();
  }
  return _supabaseClient;
}

// Export the client through a getter to ensure it's always valid
export const supabase: SupabaseClient<Database> = new Proxy(_supabaseClient, {
  get(target, prop) {
    const client = getSupabaseClient();
    const value = client[prop as keyof SupabaseClient<Database>];
    return typeof value === 'function' ? value.bind(client) : value;
  }
});

// Runtime validation helper with detailed logging
export function validateSupabaseClient(): void {
  const client = getSupabaseClient();
  
  if (!client) {
    console.error("[FATAL] Supabase client is null/undefined");
    throw new Error("Supabase client is invalid - null or undefined");
  }
  
  if (typeof client !== 'object') {
    console.error("[FATAL] Supabase client is not an object, got:", typeof client, client);
    throw new Error(`Supabase client is invalid - expected object, got ${typeof client}`);
  }
  
  if (typeof client.from !== "function") {
    console.error("[FATAL] Supabase client missing 'from' method, available methods:", Object.keys(client));
    throw new Error("Supabase client is invalid - missing 'from' method");
  }
}
