
// This file is automatically generated. Do not edit it directly.
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wufjtlnxiwipdlqsntqk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind1Zmp0bG54aXdpcGRscXNudHFrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5NTExNjAsImV4cCI6MjA2NTUyNzE2MH0.kmfmAWpH_8IxIro1J1hd_mwbvwKCEYzaJhrOWY4Ohxw";

// Validate environment
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error("Missing Supabase environment variables");
}

// Create client with error handling
function createSupabaseClient(): SupabaseClient<Database> {
  try {
    const client = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
    
    // Validate client has required methods
    if (!client || typeof client.from !== "function" || typeof client.auth !== "object") {
      throw new Error("Invalid Supabase client - missing required methods");
    }
    
    return client;
  } catch (error) {
    console.error("[FATAL] Failed to create Supabase client:", error);
    throw new Error("Application cannot start - Supabase client creation failed");
  }
}

// Create the client instance ONCE
const _supabaseClient = createSupabaseClient();

// Freeze the client to prevent modification
Object.freeze(_supabaseClient);

// Export with getter to prevent reassignment
export const supabase: SupabaseClient<Database> = _supabaseClient;

// Prevent any external code from modifying the supabase export
Object.defineProperty(exports, 'supabase', {
  value: _supabaseClient,
  writable: false,
  configurable: false
});

// Runtime validation helper with detailed logging
export function validateSupabaseClient(): void {
  if (!supabase) {
    console.error("[FATAL] Supabase client is null/undefined");
    throw new Error("Supabase client is invalid - null or undefined");
  }
  
  if (typeof supabase !== 'object') {
    console.error("[FATAL] Supabase client is not an object, got:", typeof supabase, supabase);
    throw new Error(`Supabase client is invalid - expected object, got ${typeof supabase}`);
  }
  
  if (typeof supabase.from !== "function") {
    console.error("[FATAL] Supabase client missing 'from' method, available methods:", Object.keys(supabase));
    throw new Error("Supabase client is invalid - missing 'from' method");
  }
}
